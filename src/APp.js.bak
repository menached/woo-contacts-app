import React, { useEffect, useState } from 'react';
import axios from 'axios';

function App() {
  const [contacts, setContacts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(25); // Default is 25 rows per page
  const [totalContacts, setTotalContacts] = useState(0);

  // Fetch contacts from the backend API with pagination and limit
  const fetchContacts = (page, limit) => {
    axios
      .get(`http://localhost:5000/contacts?page=${page}&limit=${limit}`)
      .then(response => {
        setContacts(response.data.contacts);
        setTotalPages(response.data.totalPages);
        setCurrentPage(response.data.currentPage);
        setTotalContacts(response.data.totalContacts);
      })
      .catch(error => {
        console.error('Error fetching contacts:', error);
      });
  };

  useEffect(() => {
    fetchContacts(currentPage, rowsPerPage); // Fetch contacts when component mounts or when the page/limit changes
  }, [currentPage, rowsPerPage]);

  // Handle page change
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  // Handle rows per page change
  const handleRowsChange = (event) => {
    setRowsPerPage(parseInt(event.target.value));
    setCurrentPage(1); // Reset to first page when changing rows per page
  };

  return (
    <div className="App">
      <h1>Contacts List (Page {currentPage} of {totalPages})</h1>

      {/* Dropdown for selecting rows per page */}
      <div className="rows-per-page">
        <label>Rows per page: </label>
        <select value={rowsPerPage} onChange={handleRowsChange}>
          <option value={10}>10</option>
          <option value={25}>25</option>
          <option value={50}>50</option>
          <option value={100}>100</option>
          <option value={1000}>1000</option>
        </select>
      </div>

      {/* Contacts Table */}
      <table>
        <thead>
          <tr>
            <th>Full Name</th>
            <th>Email</th>
            <th>Phone Number</th>
            <th>Street Address</th>
            <th>City</th>
            <th>ZIP Code</th>
            <th>Category</th>
          </tr>
        </thead>
        <tbody>
          {contacts.map((contact) => (
            <tr key={contact.id}>
              <td>{contact.full_name}</td>
              <td>{contact.email}</td>
              <td>{contact.phone_number}</td>
              <td>{contact.street_address}</td>
              <td>{contact.city}</td>
              <td>{contact.zip_code}</td>
              <td>{contact.category}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pagination Controls */}
      <div className="pagination">
        <button
          onClick={() => handlePageChange(1)}
          disabled={currentPage === 1}
        >
          First
        </button>
        <button
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          Previous
        </button>
        <span>
          Page {currentPage} of {totalPages}
        </span>
        <button
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
        >
          Next
        </button>
        <button
          onClick={() => handlePageChange(totalPages)}
          disabled={currentPage === totalPages}
        >
          Last
        </button>
      </div>

      {/* Total Contacts Information */}
      <div>Total Contacts: {totalContacts}</div>
    </div>
  );
}

export default App;

